{
  "sha": "4beb514d071c9beec69b8917b5265e77ade22fb3",
  "node_id": "MDY6Q29tbWl0NTE5MDUzNTM6NGJlYjUxNGQwNzFjOWJlZWM2OWI4OTE3YjUyNjVlNzdhZGUyMmZiMw==",
  "commit": {
    "author": {
      "name": "Benjamin Kietzman",
      "email": "bengilgit@gmail.com",
      "date": "2021-02-24T22:12:11Z"
    },
    "committer": {
      "name": "Benjamin Kietzman",
      "email": "bengilgit@gmail.com",
      "date": "2021-02-24T22:12:11Z"
    },
    "message": "ARROW-11767: [C++] Scalar::Hash may segfault\n\nCloses #9562 from bkietz/11767-Scalarhash-may-segfault-f\n\nAuthored-by: Benjamin Kietzman <bengilgit@gmail.com>\nSigned-off-by: Benjamin Kietzman <bengilgit@gmail.com>",
    "tree": {
      "sha": "99eb23f8e96c4778f036a75bf77e8ab6e79c7913",
      "url": "https://api.github.com/repos/apache/arrow/git/trees/99eb23f8e96c4778f036a75bf77e8ab6e79c7913"
    },
    "url": "https://api.github.com/repos/apache/arrow/git/commits/4beb514d071c9beec69b8917b5265e77ade22fb3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/apache/arrow/commits/4beb514d071c9beec69b8917b5265e77ade22fb3",
  "html_url": "https://github.com/apache/arrow/commit/4beb514d071c9beec69b8917b5265e77ade22fb3",
  "comments_url": "https://api.github.com/repos/apache/arrow/commits/4beb514d071c9beec69b8917b5265e77ade22fb3/comments",
  "author": {
    "login": "bkietz",
    "id": 1299904,
    "node_id": "MDQ6VXNlcjEyOTk5MDQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1299904?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bkietz",
    "html_url": "https://github.com/bkietz",
    "followers_url": "https://api.github.com/users/bkietz/followers",
    "following_url": "https://api.github.com/users/bkietz/following{/other_user}",
    "gists_url": "https://api.github.com/users/bkietz/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bkietz/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bkietz/subscriptions",
    "organizations_url": "https://api.github.com/users/bkietz/orgs",
    "repos_url": "https://api.github.com/users/bkietz/repos",
    "events_url": "https://api.github.com/users/bkietz/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bkietz/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bkietz",
    "id": 1299904,
    "node_id": "MDQ6VXNlcjEyOTk5MDQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1299904?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bkietz",
    "html_url": "https://github.com/bkietz",
    "followers_url": "https://api.github.com/users/bkietz/followers",
    "following_url": "https://api.github.com/users/bkietz/following{/other_user}",
    "gists_url": "https://api.github.com/users/bkietz/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bkietz/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bkietz/subscriptions",
    "organizations_url": "https://api.github.com/users/bkietz/orgs",
    "repos_url": "https://api.github.com/users/bkietz/repos",
    "events_url": "https://api.github.com/users/bkietz/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bkietz/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6d703c4c7b15be630af48d5e9ef61628751674b2",
      "url": "https://api.github.com/repos/apache/arrow/commits/6d703c4c7b15be630af48d5e9ef61628751674b2",
      "html_url": "https://github.com/apache/arrow/commit/6d703c4c7b15be630af48d5e9ef61628751674b2"
    }
  ],
  "stats": {
    "total": 33,
    "additions": 30,
    "deletions": 3
  },
  "files": [
    {
      "sha": "399eac675f4df9f577ad527ee5103f1d9857e723",
      "filename": "cpp/src/arrow/scalar.cc",
      "status": "modified",
      "additions": 11,
      "deletions": 3,
      "changes": 14,
      "blob_url": "https://github.com/apache/arrow/blob/4beb514d071c9beec69b8917b5265e77ade22fb3/cpp/src/arrow/scalar.cc",
      "raw_url": "https://github.com/apache/arrow/raw/4beb514d071c9beec69b8917b5265e77ade22fb3/cpp/src/arrow/scalar.cc",
      "contents_url": "https://api.github.com/repos/apache/arrow/contents/cpp/src/arrow/scalar.cc?ref=4beb514d071c9beec69b8917b5265e77ade22fb3",
      "patch": "@@ -90,9 +90,13 @@ struct ScalarHashImpl {\n     return Status::OK();\n   }\n \n+  Status Visit(const DictionaryScalar& s) {\n+    AccumulateHashFrom(*s.value.index);\n+    return Status::OK();\n+  }\n+\n   // TODO(bkietz) implement less wimpy hashing when these have ValueType\n   Status Visit(const UnionScalar& s) { return Status::OK(); }\n-  Status Visit(const DictionaryScalar& s) { return Status::OK(); }\n   Status Visit(const ExtensionScalar& s) { return Status::OK(); }\n \n   template <typename T>\n@@ -127,14 +131,18 @@ struct ScalarHashImpl {\n     return Status::OK();\n   }\n \n-  explicit ScalarHashImpl(const Scalar& scalar) { AccumulateHashFrom(scalar); }\n+  explicit ScalarHashImpl(const Scalar& scalar) : hash_(scalar.type->Hash()) {\n+    if (scalar.is_valid) {\n+      AccumulateHashFrom(scalar);\n+    }\n+  }\n \n   void AccumulateHashFrom(const Scalar& scalar) {\n     DCHECK_OK(StdHash(scalar.type->fingerprint()));\n     DCHECK_OK(VisitScalarInline(scalar, this));\n   }\n \n-  size_t hash_ = 0;\n+  size_t hash_;\n };\n \n size_t Scalar::Hash::hash(const Scalar& scalar) { return ScalarHashImpl(scalar).hash_; }"
    },
    {
      "sha": "d99debb2ba9458a54ebaec79bb8b98d7b2dd3eaf",
      "filename": "cpp/src/arrow/scalar_test.cc",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/apache/arrow/blob/4beb514d071c9beec69b8917b5265e77ade22fb3/cpp/src/arrow/scalar_test.cc",
      "raw_url": "https://github.com/apache/arrow/raw/4beb514d071c9beec69b8917b5265e77ade22fb3/cpp/src/arrow/scalar_test.cc",
      "contents_url": "https://api.github.com/repos/apache/arrow/contents/cpp/src/arrow/scalar_test.cc?ref=4beb514d071c9beec69b8917b5265e77ade22fb3",
      "patch": "@@ -111,10 +111,12 @@ TYPED_TEST(TestNumericScalar, Hashing) {\n   using ScalarType = typename TypeTraits<TypeParam>::ScalarType;\n \n   std::unordered_set<std::shared_ptr<Scalar>, Scalar::Hash, Scalar::PtrsEqual> set;\n+  set.emplace(std::make_shared<ScalarType>());\n   for (T i = 0; i < 10; ++i) {\n     set.emplace(std::make_shared<ScalarType>(i));\n   }\n \n+  ASSERT_FALSE(set.emplace(std::make_shared<ScalarType>()).second);\n   for (T i = 0; i < 10; ++i) {\n     ASSERT_FALSE(set.emplace(std::make_shared<ScalarType>(i)).second);\n   }\n@@ -406,6 +408,23 @@ TEST(TestBinaryScalar, Basics) {\n   ASSERT_FALSE(two->Equals(BinaryScalar(Buffer::FromString(\"else\"))));\n }\n \n+TEST(TestBinaryScalar, Hashing) {\n+  auto FromInt = [](int i) {\n+    return std::make_shared<BinaryScalar>(Buffer::FromString(std::to_string(i)));\n+  };\n+\n+  std::unordered_set<std::shared_ptr<Scalar>, Scalar::Hash, Scalar::PtrsEqual> set;\n+  set.emplace(std::make_shared<BinaryScalar>());\n+  for (int i = 0; i < 10; ++i) {\n+    set.emplace(FromInt(i));\n+  }\n+\n+  ASSERT_FALSE(set.emplace(std::make_shared<BinaryScalar>()).second);\n+  for (int i = 0; i < 10; ++i) {\n+    ASSERT_FALSE(set.emplace(FromInt(i)).second);\n+  }\n+}\n+\n TEST(TestStringScalar, MakeScalar) {\n   auto three = MakeScalar(\"three\");\n   ASSERT_EQ(StringScalar(\"three\"), *three);"
    }
  ]
}
