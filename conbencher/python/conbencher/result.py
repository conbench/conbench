from dataclasses import asdict, dataclass, field
from typing import Any, Dict

from .machine_info import github_info, machine_info


@dataclass
class BenchmarkResult:
    """
    A dataclass for containing results from running a benchmark.

    Attributes
    ----------
    name : str
        benchmark name
    run_name : str
        run name
    run_id : str
        ID string for the run, typically generated by conbench
    batch_id : str
        ID string for the batch, generated by conbench unless manually specified
    run_reason : str
        Reason for run (e.g. "nightly")
    timestamp : str
        Timestamp of call, in ISO format
    stats : Dict[str, Any]
        Measurement data and summary statistics
    params : Dict[str, Any]
        Parameter names and arguments (i.e. the case) supplied for the run. Currently a
        subset of ``tags``, but often needed separately.
    tags : Dict[str, Any]
        Many things. Determines history runs
    info : Dict[str, Any]
        Things like ``arrow_version``, ``arrow_compiler_id``, ``arrow_compiler_version``,
        ``benchmark_language_version, ``arrow_version_r``
    machine_info : Dict[str, Any]
        For benchmarks run on a single node, information about the machine, e.g. OS,
        architecture, etc.
    cluster_info : Dict[str, Any]
        For benchmarks run on a cluster, information about the cluster
    context : Dict[str, Any]
        ``arrow_compiler_flags``, ``benchmark_language``
    github : Dict[str, Any]
        ``repository``, ``commit``
    options : Dict[str, Any]
        For R benchmarks, ``cpu_count``, ``iterations``, ``drop_caches``
    output : str
        stdout from process running the benchmark
    error : str
        stderr from process running the benchmark

    Fields not posted directly to conbench: ``name``, ``params``, ``options``, ``output``
    """

    name: str = None
    run_name: str = None
    run_id: str = None
    batch_id: str = None
    run_reason: str = None
    timestamp: str = None
    stats: Dict[str, Any] = None
    params: Dict[str, Any] = None
    tags: Dict[str, Any] = field(default_factory=dict)
    info: Dict[str, Any] = None
    machine_info: Dict[str, Any] = None
    cluster_info: Dict[str, Any] = None
    context: Dict[str, Any] = None
    github: Dict[str, Any] = field(default_factory=github_info)
    options: Dict[str, Any] = None
    output: str = None
    error: str = None

    def __post_init__(self):
        if self.name and not self.tags.get("name"):
            self.tags["name"] = self.name

        if self.options.get("run_name") and not self.run_name:
            self.run_name = self.options["run_name"]

        if not self.machine_info and not self.cluster_info:
            self.machine_info = machine_info(host_name=None)

    def to_publishable_dict(self):
        """Returns a dict suitable for sending to conbench"""
        res_dict = asdict(self)
        for el in ["name", "params", "options", "output"]:
            res_dict.pop(el)

        return res_dict
